# Generated by Django 4.0.6 on 2022-07-17 07:31
import mimetypes
import os
from hashlib import md5

from django.db import migrations

from common import config


def dem_docs_2_gen_docs(apps, schema_editor):
    """
    Transfère tous les documents spécifiques des demandes dans des documents génériques

    Correspondances :

    (Generic) Document           (Dem) Document      Commentaire
    physical_path                UNCpath             Chemin initial du fichier
    logical_path                  - idem -
    doc_type                     code                type de fichier
    description                  commentaire
    owner                        - Deviné à partir du rédacteur de la demande -
    hash
    mime_type
    creation                     date_create
    modification                 date_modification
    desactivation                - None -
     - ignored -                 status

    """
    config.settings.MEDIA_ROOT
    dem_model = apps.get_model('dem', 'Demande')
    dem_docs_link_model = apps.get_model('dem', 'DocumentLink')
    dem_docs_model = apps.get_model('dem', 'Document')
    docs_model = apps.get_model('document', 'Document')
    gen_docs_model = apps.get_model('document', 'GenericDocument')
    content_type_model = apps.get_model('contenttypes', 'ContentType')

    all_docs = dem_docs_model.objects.all()

    for doc in all_docs:
        hash = md5()
        f = open(os.path.join(config.settings.MEDIA_ROOT, str(doc.UNCpath)), 'rb')
        hash.update(f.read())
        # print(hash.hexdigest(), doc.code, os.path.join(config.settings.MEDIA_ROOT, str(doc.UNCpath)))

        owner = None
        demande = None
        links = dem_docs_link_model.objects.filter(document=doc)
        if links.exists():
            demande = links[0].demande
            owner = demande.redacteur
        # else:
            # print("** Unused doc, not saving.")

        if not docs_model.objects.filter(hash=hash.hexdigest()).exists():

            if owner is not None:
                gen_doc = docs_model(
                    physical_path=str(doc.UNCpath),
                    logical_path=str(doc.UNCpath),
                    hash=hash.hexdigest(),
                    doc_type=doc.code or 'DI',
                    mime_type=mimetypes.guess_type(os.path.join(config.settings.MEDIA_ROOT, str(doc.UNCpath)), strict=False)[0],
                    owner=owner,
                    description=doc.commentaire,
                    modification=doc.date_modification,
                    creation=doc.date_creation
                )
                gen_doc.save(force_insert=True)
        else:
            # print("** Already in the database")
            gen_doc = docs_model.objects.filter(hash=hash.hexdigest())[0]

        demande_ct = content_type_model.objects.get_for_model(dem_model)

        if demande:
            gen_doc_links = gen_docs_model.objects.filter(document=gen_doc, content_type=demande_ct, object_id=demande.pk)
            if not gen_doc_links.exists():
                gen_doc_link = gen_docs_model(
                    name=None,
                    document=gen_doc,
                    user=owner,
                    comment=None,
                    content_type=demande_ct,
                    object_id=demande.pk,
                )
                gen_doc_link.save(force_insert=True)


class Migration(migrations.Migration):
    dependencies = [
        ('dem', '0074_alter_demande_calendrier_alter_demande_nature'),
        ('document', '0010_alter_document_doc_type')
    ]

    operations = [
        migrations.RunPython(dem_docs_2_gen_docs),
    ]
