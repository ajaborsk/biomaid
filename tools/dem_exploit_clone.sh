#!/bin/bash

# A lancer à la racine d'un dépôt git de dem (BIOM_AID)
# en étant connecté (en direct ou en VPN) au réseau du CHU AP
#
# - Met le dépôt dans la version d'exploitation
# - Rapatrie les données de la base de données d'exploitation
# - Reconstruit la base de données locale avec ces données
#
# Alternativement, on peut passer un paramètre à ce script
# Dans ce cas, ce doit être le nom d'un fichier de dump (version compacté par bzip2)
# laissé par une précédente exécution du script avec connexion au serveur
# Dans ce cas, aucune connexion au serveur n'est réalisée mais seule la base de données est recréée
# Les fichiers en pièces jointes (dossier media/) sont laissés tel que

# serveur d'exploitation
# server=trinidad
# user=user_dra
# database_name=dem_db
server=tobago.chu-amiens.local
user=geqip

local_database_name=dem_db
local_database_user=db_user

distant_python=/home/geqip/.cache/pypoetry/virtualenvs/biom-aid-YnUbqE3_-py3.10/bin/python

# Stop script on first error
set -e

# Vérifie que personne n'utilise la base de données :
c=`psql -d $local_database_name -U $local_database_user --csv -c "SELECT count(*) FROM pg_stat_activity WHERE datname='$local_database_name';" | tail -1`
if [ $c != 1 ]; then
  echo "Erreur, base de donnée $local_database_name utilisée ! : "$c ;
  exit ;
else
  echo "Base de données libre ; Ok";
fi

if [ $# -eq 1 ];
then
  echo "Récupère la base de données depuis le fichier $1 (dump json bzip2)"

  # Récupère le n° de commit dans le nom du fichier
  [[ $1 =~ ([0-9a-z]{40}) ]] && commit=${BASH_REMATCH[1]}

  # Enlève le .bz2 du nom de fichier
  filename=${1%.*}
else
  echo "Récupère la base de données depuis $server"

  # version distante (commit) / exploitation
  commit=`ssh $user@$server -C "cd dem ; git log -n 1 --oneline --no-abbrev-commit" | cut -f 1 -d " "`

  # Crée un nom de fichier avec la date, le numéro de version, etc..
  filename=`date -I`-$commit-$local_database_name.json

  echo "Fait le backup (à distance) et le bzip2"
  ssh $user@$server "cd dem/ ; rm -f ~/$filename* && $distant_python ./manage.py dumpdata -a --natural-foreign -e extable -e assetplusconnect -e admin.Logentry -e contenttypes -e sessions -e auth.Permission -o ~/$filename && bzip2 ~/$filename"

  echo "Récupère le backup localement"
  scp $user@$server:$filename.bz2 .

  echo "Supprime le backup distant"
  ssh $user@$server rm $filename.bz2

  # Copie des documents téléchargés
  rsync -a --stats $user@$server:media .

  # Copie des documents téléchargés
  rsync -a --stats $user@$server:/mnt/users_BIOMEDICAL/COMMUN/magh2/* ../dem-magh2
fi

# Bascule le code (la version de travail locale) vers la version actuellement en exploitation
git checkout $commit

# Vide la BDD
python manage.py reset_db --noinput

# recrée à partir de 0 la structure (et les content-types et les permissions) de la BDD de Django
python manage.py migrate

# dé-bzip2 le backup, l'injecte dans le Django (vide) et rebzip2pe le backup local
bzip2 -df $filename.bz2 &&
python manage.py loaddata $filename &&
bzip2 $filename

# A ce point, on a une copie presque parfaite de la version d'exploitation
echo "Pour rebasculer sur la version de travail :"
echo "> git checkout main && git submodule update && python manage.py migrate"
