#
# This file is part of the BIOM_AID distribution (https://bitbucket.org/kig13/dem/).
# Copyright (c) 2020-2021 Brice Nord, Romuald Kliglich, Alexandre Jaborska, Philomène Mazand.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
"""
Django settings for dra project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import logging
import os
import sys
from subprocess import check_output, CalledProcessError

try:
    import debug_toolbar

    del debug_toolbar
    DEBUG_TOOLBAR = True
except ImportError:
    DEBUG_TOOLBAR = False

DEBUG = False


# Detect if we are in a test session
TESTING = sys.argv[1:2] == ['test']

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
SITE_ROOT = os.path.abspath(os.path.join(BASE_DIR, os.pardir))
TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')
ADMIN_TEMPLATE_DIR = os.path.join(BASE_DIR, 'dra/templates')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/


# Récupère les données de version depuis git : dernier tag nommé
# A terme, ce n'est pas une très bonne idée car la distribution n'utilisera pas git...

# git_describe = check_output(['git', 'describe', '--tags']).decode('ascii')
# git_date = check_output(['git', 'log', '-1', '--pretty=\'%cs\'']).decode('ascii')

try:
    # Try first to get version from source file
    from settings.version import DEM_VERSION, DEM_VERSION_DATE, DEM_VERSION_NAME
except ImportError:
    # Then try to get version information from git tree
    try:
        git_tags = check_output(
            [
                'git',
                'for-each-ref',
                '--sort=-taggerdate',
                '--format=%(refname:short) %(taggerdate:short) %(subject)',
                'refs/tags',
            ]
        ).decode('utf8')
        git_data = git_tags.split('\n')[0].split(' ', maxsplit=2)
        # print(git_tags, git_data)

        DEM_VERSION = git_data[0]
        DEM_VERSION_DATE = git_data[1]
        DEM_VERSION_NAME = git_data[2]
    except CalledProcessError:
        # Fallback to constant version information
        DEM_VERSION = 'biom_aid'
        DEM_VERSION_DATE = 'now'
        DEM_VERSION_NAME = 'fallback'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admindocs',
    'django_extensions',
    'django_tables2',
    'django_rename_app',
    'crispy_forms',
    'phonenumber_field',
    'generic_comment',
    'document',
    'extable',
    'analytics',
    'smart_view',
    # 'local',
    'assetplusconnect',
    'common',
    'dem',
    'drachar',
    'marche',
    'geprete',
    'finance',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'common.middleware.LoggingMiddleware',
    'common.middleware.SetLastSeenMiddleware',
    'common.middleware.StartupMiddleware',
]

ROOT_URLCONF = 'dra.urls'

TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR, ADMIN_TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = (
    'common.auth_backends.MyLDAPBackend',
    'common.auth_backends.MyAuthBackend',
    # 'django.contrib.auth.backends.ModelBackend',
)

WSGI_APPLICATION = 'dra.wsgi.application'

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

AUTH_USER_MODEL = 'common.User'

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'Europe/Paris'
USE_TZ = True

# For these two settings, True is the default from Django 4.0
# USE_I18N = True
# USE_L10N = True

USE_THOUSAND_SEPARATOR = True
DATA_UPLOAD_MAX_NUMBER_FIELDS = 5000

# Uploaded files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_ROOT = os.path.join(SITE_ROOT, 'staticfiles')
STATIC_URL = 'static/'  # Avoid leading '/' so it works with SCRIPT_NAME (site in subpath)
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'local/static'),
)
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # 'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# DO NOT USE : Still not ready...
# STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

FIXTURE_DIRS = [os.path.join(BASE_DIR, 'fixtures')]

LOGIN_URL_NAME = 'common:sign'
LOGIN_URL = '/portal-config/common/sign/'  # Never used in regular code but seems used in tests (using generic portal/config)
LOGIN_REDIRECT_URL = '/geqip-chuap/common/login_check/'
LOGIN_REDIRECT_URL_NAME = 'common:login_check'
LOGOUT_REDIRECT_URL_NAME = 'dem:home'


EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

PHONENUMBER_DB_FORMAT = "NATIONAL"
PHONENUMBER_DEFAULT_REGION = "FR"


class DebugOnlyFilter(logging.Filter):
    def filter(self, record):
        if record.levelno == logging.DEBUG:
            allow = True
        else:
            allow = False
        return allow


LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'debug_only_filter': {
            '()': DebugOnlyFilter,
        },
    },
    'formatters': {
        'default': {
            'format': '%(asctime)s %(name)s %(levelname)s %(message)s',
            'datefmt': '%Y-%m-%dT%H:%M:%S',
        },
        'debug_format': {'format': '[%(asctime)s]: %(levelname)s in %(name)s at line %(lineno)s: "%(message)s"'},
    },
    'handlers': {
        'console': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        },
        'debug_console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'debug_format',
            'filters': ['debug_only_filter'],
        },
        'query_logger': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': './test-queries.log' if 'test' in sys.argv else './queries.log',
            'formatter': 'default',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'debug_console'],
            'propagate': False,
        },
        'common': {
            'handlers': ['console', 'debug_console'],
            'propagate': False,
        },
        'common.middleware': {
            'handlers': ['query_logger'],
            'propagate': False,
        },
        'dem': {
            'handlers': ['console', 'debug_console'],
            'propagate': False,
        },
        "django_auth_ldap": {"level": "DEBUG", "handlers": ["console"]},
    },
}


# Do not modify code below, please !

# This will import specific settings for local project (organisation, templates, logos,...)
try:
    from local.settings import *  # noqa F403,F401
except ModuleNotFoundError:
    print('*' * 132)
    print("No local configuration found.")
    print("Il faut impérativement un dossier '/local' sur la racine du projet avec un fichier 'settings.py' qui configure BIOM_AID")
    print("C'est généralement un lien symbolique vers un dossier local_XXX ou XXX est le nom de l'établissement ou du GHT")
    print('*' * 132)
    raise RuntimeError

# This will import specific settings for production, testing environment, development...
try:
    if os.getenv('MKTEST') is None:
        # New module name
        from instance_settings import *  # noqa F403,F401
    else:
        # New module name
        from mktest_instance_settings import *  # noqa F403,F401
except ModuleNotFoundError:
    print("No site/environment configuration found.")
