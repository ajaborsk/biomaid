[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "settings"
python_files = ['tests.py', 'tests_*.py', 'test_*.py', '*_tests.py']
filterwarnings = ['ignore::DeprecationWarning']
# Logging
#  DATE FORMAT EXAMPLE: %Y-%m-%d %H:%M:%S
log_cli_format = "%(asctime)s %(levelname)-8s %(name)-8s %(message)s"
log_cli_level = "WARNING"
log_cli_date_format = "%H:%M:%S"
env = 'DJANGO_ALLOW_ASYNC_UNSAFE=1'

# ReportPortal `pytest-reportportal` plugin
# ReportPortal (required)
# rp_endpoint = "http://localhost:8080"
# rp_uuid = "[UUID from USER PROFILE section of ReportPortal]"
# rp_launch = "EXAMPLE_TEST_RUN_NAME"
# rp_project = "default_personal"

# For more info, including other pytest.ini options for ReportPortal,
# visit: https://github.com/reportportal/agent-python-pytest

[tool.black]
line-length = 132
max-line-length = 132
skip-string-normalization = true
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations     # exclude all migrations files
  )/
)
'''

[tool.flake8]
# Using flake9 instead of flake8 package allows using this pyproject.toml settings (instead of tox.ini)
# !! Command to use in the shell is still 'flake8'
max-line-length = 132
exclude = "media,*/migrations/*.py,dist"

[tool.djlint]
indent = 2

[tool.poetry]
name = "biomaid"
version = "0.12.2"
description = "BIOM_AID..."
authors = [
  "Brice Nord <nord.brice@chu-amiens.fr>",
  "Romuald Kliglich <kliglich.romuald@chu-amiens.fr>",
  "Alexandre Jaborska <alexandre.jaborska@laposte.net>",
  "Philom√®ne Mazand <philomene.mazand@gmail.com>",
]
license = "GNU General Public License v3"
packages = [
  { include = "settings" },
  { include = "common" },
  { include = "dra" },
  { include = "docs" },
  { include = "document" },
  { include = "smart_view" },
  { include = "dem" },
  { include = "drachar" },
  { include = "extable" },
  { include = "analytics" },
  { include = "assetplusconnect" },
  { include = "finance" },
  { include = "generic_comment" },
  { include = "importationdata" },
  { include = "local_afib" },
  { include = "local_biomaid" },
  { include = "tools" },
]

[tool.poetry.scripts]

[tool.poetry.dependencies]
python = ">=3.9,<3.12"
Django = "^4.2"
django-extensions = "^3.1.0"
django-pandas = "^0.6.2"
django-rename-app = "^0.1.2"
django-crispy-forms = "^1.12"
gunicorn = "^20.0.4"
install = "^1.3.1"
numpy = "^1.21.4"
pandas = "^1.3.3"
fsspec = ">2021.7.0"
psycopg2 = "^2.9.4"
python-dateutil = "^2.8.1"
pytz = ">2020.1"
six = "^1.15.0"
xlwt = "^1.3.0"
openpyxl = "^3.0.5"
xlsxwriter = "^3.0.1"
progress = "^1.6"
django-tables2 = "^2.4.1"
tablib = "^3.1.0"
construct = "^2.10.67"
altair = "^4.2.0"
tomlkit = "^0.11.0"
toml = "^0.10.2"
django-phonenumber-field = { extras = ["phonenumberslite"], version = "^7.0.0" }
pysftp = "^0.2.9"
django-auth-ldap = { version = "^4.1.0", optional = true }
python-ldap = [
  #    { url = "https://download.lfd.uci.edu/pythonlibs/archived/python_ldap-3.4.0-cp310-cp310-win_amd64.whl", markers = "platform_system == 'Windows'", optional = true },
  { version = "^3.0.0", markers = "platform_system != 'Windows'", optional = true },
]
cx-Oracle = { version = "8.3.0", optional = true }
html-sanitizer = "^2.2.0"

[tool.poetry.extras]
ldap = ["python-ldap", "django-auth-ldap"]
oracle = ["cx-Oracle"]

[tool.poetry.group.doc.dependencies]
sphinx = "^5.0.0"
sphinx-autoapi = "^1.8.4"
sphinxcontrib-svg2pdfconverter = "^1.1.1"
sphinx-book-theme = "^1.0.1"

[tool.poetry.group.tests.dependencies]
parameterized = "^0.8.1"
time-machine = "^2.5.0"
pytest = "^7.1.1"
pytest-playwright = "^0.3.0"
pytest-django = "^4.5.2"
selenium = "^4.1.3"
pytest-env = "^0.8.1"

[tool.poetry.group.dev.dependencies]
flake9 = "^3.8.3"
black = "^22.3.0"
django-debug-toolbar = "^3.2.2"
pysftp = "^0.2.9"
ptpython = "^3.0.20"
djlint = "^1.0.0"
setuptools = "^65.3.0"
cookiecutter = "^2.1.0"
django-stubs = "^1.10.1"
pandas-stubs = "^1.4.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
